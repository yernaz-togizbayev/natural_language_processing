# -*- coding: utf-8 -*-
"""Exercise_Sheet_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j6whB05Ig-ZiGOdIA-iDuIr5Bdt7mbr9

# Natural Language Processing

## Exercise Sheet 3
"""

#imports for all exercises
import nltk
import random
from nltk.corpus import brown

nltk.download('brown')

"""### Exercise 1

Rewrite the following loop as a list comprehension:
"""

sent = ['The', 'dog', 'gave', 'John', 'the', 'newspaper']
result = []
for word in sent:
    word_len = (word, len(word))
    result.append(word_len)
result

sent = ['The', 'dog', 'gave', 'John', 'the', 'newspaper']
result = [(word, len(word)) for word in sent]
result

"""### Exercise 2

Pig Latin is a simple transformation of English text. Each word of the text is converted as follows: move any consonant (or consonant cluster) that appears at the start of the word to the end, then append "ay", e.g. "string" $\rightarrow$ "ingstray". If a word starts with a vowel, just add "way" to the end, e.g. "idle" $\rightarrow$ "idleway".

Write a function to convert a word to Pig Latin. Test it with the words "pig", "cheers", and "omelet".

"""

def pig_latin(word):
    vowels = 'aeiou'
    word = word.lower()
    pig_latin_word = ''

    if word[0] in vowels:
      pig_latin_word = word + 'way'
    else:
      for idx, letter in enumerate(word):
        if letter in vowels:
          pig_latin_word = word[idx:] + word[:idx] + 'ay'

    return pig_latin_word

print(pig_latin("pig"))
print(pig_latin("cheers"))
print(pig_latin("omelet"))

"""### Exercise 3

Python's `random` module includes a function `choice()` which randomly chooses an item from a sequence, e.g. `choice('aehh ')` will produce one of four possible characters, with the letter "h" being twice as frequent as the others. Write a generator expression that produces a sequence of 500 randomly chosen letters drawn from the string "aehh ", and put this expression inside a call to the `''.join()` function, to concatenate them into one long string. You should get a result that looks like uncontrolled sneezing or maniacal laughter: "he  haha ee  heheeh eha". Use `split()` and `join()` again to normalize the whitespace in this string.
"""

# Generate a sequence of 500 random characters
random_sequence = ''.join(random.choice('aehh ') for _ in range(500))
print("Generated string:", random_sequence)

# Normalize whitespace in the string
normalized_string = " ".join(random_sequence.split())
print("Normalized string:", normalized_string)

"""### Exercise 4

Readability measures are used to score the reading difficulty of a text, for the purposes of selecting texts of appropriate difficulty for language learners. Let us define $\mu_w$ to be the average number of letters per word, and $\mu_s$ to be the average number of words per sentence, in a given text. The Automated Readability Index (ARI) of the text is defined to be: $4.71 \mu_w + 0.5 \mu_s - 21.43$. Compute the ARI score for the "lore" and "learned" genre of the Brown Corpus. Make use of the fact that `nltk.corpus.brown.words()` produces a sequence of words, while `nltk.corpus.brown.sents()` produces a sequence of sentences.

"""

def compute_ari_score(genre):
    words = brown.words(categories=genre)
    sents = brown.sents(categories=genre)

    # Count total letters
    count_letters = sum(len(word) for word in words if word.isalpha())

    mu_w = count_letters / len(words)
    mu_s = len(words) / len(sents)

    ari = 4.71 * mu_w + 0.5 * mu_s - 21.43

    return ari

for genre in ["lore", "learned"]:
    print(f"{genre.capitalize()} ARI: {compute_ari_score(genre):.3f}")

"""### Exercise 5

Define a variable `silly` to contain the string: 'newly formed bland ideas are inexpressible in an infuriating way'. Now write code to perform the following tasks:

a) Split `silly` into a list of strings, one per word, using Python's `split()` operation, and save this to a variable called `bland`.  
b) Extract the second letter of each word in `silly` and join them into a string, to get 'eoldrnnnna'.  
c) Combine the words in `bland` back into a single string, using `join()`. Make sure the words in the resulting string are separated with whitespace.  
d) Print the words of `silly` in alphabetical order, one per line.  
"""

silly = 'newly formed bland ideas are inexpressible in an infuriating way'

# a) Split 'silly' into a list of strings
bland = silly.split()
print("a) bland:", bland)

# b) Extract the second letter of each word in 'silly' and join them
second_letters = ''.join(word[1] for word in bland)
print("b) second_letters:", second_letters)

# c) Combine the words in 'bland' back into a single string
combined_string = ' '.join(bland)
print("c) combined_string:", combined_string)

# d) Print the words of 'silly' in alphabetical order
print("d) Words in alphabetical order:")
for word in sorted(bland):
    print('\t' + word)

"""### Exercise 6

Rewrite the following nested loop as a nested list comprehension:
"""

words = ['attribution', 'confabulation', 'tenacious', 'elocution',
         'sequoia', 'tenacious', 'unidirectional']
vsequences = set()
for word in words:
    vowels = []
    for char in word:
        if char in 'aeiou':
            vowels.append(char)
    vsequences.add(''.join(vowels))
sorted(vsequences)

words = ['attribution', 'confabulation', 'tenacious', 'elocution',
         'sequoia', 'tenacious', 'unidirectional']

vsequences = sorted(set(''.join([char for char in word if char in 'aeiou']) for word in words))

vsequences